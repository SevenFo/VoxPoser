import numpy as np
from perception_utils import parse_query_obj
from plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index
# +Y: front, +X: right, +Z: up

# Query: a point 10cm above the table.
affordance_map = get_empty_affordance_map()
table_obj = parse_query_obj('table')
if table_obj is None:
    ret_val = affordance_map
(min_x, min_y, min_z), (max_x, max_y, max_z) = table_obj.aabb
center_x, center_y, center_z = table_obj.position
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map
# done

# Query: a point 30cm into the topmost drawer handle.
affordance_map = get_empty_affordance_map()
top_handle = parse_query_obj('topmost drawer handle')
if table is None:
    ret_val = top_handle
# negative normal because we are moving into the handle.
moving_dir = -top_handle.normal
affordance_xyz = top_handle.position + cm2index(30, moving_dir)
affordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1
ret_val = affordance_map
# done

# Query: a point 5cm above the blue block.
affordance_map = get_empty_affordance_map()
blue_block = parse_query_obj('blue block')
if blue_block is None:
    ret_val = affordance_map
(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb
center_x, center_y, center_z = blue_block.position
# 5cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(5, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map
# done

# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.
affordance_map = get_empty_affordance_map()
tray_with_lemon = parse_query_obj('tray that contains the lemon')
if tray_with_lemon is None:
    ret_val = affordance_map
(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb
center_x, center_y, center_z = tray_with_lemon.position
# 4cm to the left of so we subtract from x-axis, and 10cm on top of so we add to z-axis
x = min_x - cm2index(4, 'x')
y = center_y 
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map
# done

# Query: a point 10cm to the right of [45 49 66], and 5cm above it.
affordance_map = get_empty_affordance_map()
# 10cm to the right of so we add to x-axis, and 5cm above it so we add to z-axis
x = 45 + cm2index(10, 'x')
y = 49 
z = 66 + cm2index(5, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map
# done

# Query: the blue circle.
affordance_map = get_empty_affordance_map()
blue_circle = parse_query_obj('blue circle')
if blue_circle is None:
    ret_val = affordance_map
affordance_map = blue_circle.occupancy_map
ret_val = affordance_map
# done

# Query: a point 10cm above and 5cm to the left of the yellow bowl.
affordance_map = get_empty_affordance_map()
yellow_bowl = parse_query_obj('yellow bowl')
if yellow_bowl is None:
    ret_val = affordance_map
(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb
center_x, center_y, center_z = yellow_bowl.position
# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from x-axis
x = min_x - cm2index(5, 'x')
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map
# done

# Query: a point 88cm to the front of [10 20 50].
affordance_map = get_empty_affordance_map()
# 88cm to the front of [10 20 50] so we add to y-axis
x = 10 
y = 20 + cm2index(88, 'y')
z = 50
affordance_map[x, y, z] = 1
ret_val = affordance_map
# done

# Query: a point 100cm in front of the current position.
affordance_map = get_empty_affordance_map()
current_object = parse_query_obj('quadcopter')
(min_x, min_y, min_z), (max_x, max_y, max_z) = current_object.aabb
center_x, center_y, center_z = current_object.position 
# a point 100cm in front of so we add to y-axis
x = center_x 
y = max_y + cm2index(100, 'y')
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map
# done


